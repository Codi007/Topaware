local library = loadstring(game:HttpGet('https://raw.githubusercontent.com/cueshut/saves/main/criminality%20paste%20ui%20library'))()

-- // Window \\ --
local window = library.new('leadmarker is so hot', 'leadmarker')

-- // Tabs \\ --
local tab = window.new_tab('rbxassetid://4483345998')
local tab1 = window.new_tab('rbxassetid://4483345998')

-- // Sections \\ --
local section = tab.new_section('Bruh XD')
local section1 = tab.new_section(':DDD HI')

-- // Sector \\ --
local sector = section.new_sector('OK', 'Left')
local sector1 = section.new_sector('BRUHHHH', 'Right')



local Players = game:GetService("Players")
local highlights = {}  
local highlightColor = Color3.fromRGB(84, 101, 255)


local function ApplyHighlight(Player)
    
    local Character = Player.Character or Player.CharacterAdded:Wait()
    local Humanoid = Character:WaitForChild("Humanoid")
    local Highlight = Instance.new("Highlight", Character)
    highlights[Player] = Highlight

    local function UpdateFillColor()
        Highlight.FillColor = highlightColor
    end

    local function Disconnect()
        if Highlight then
            Highlight:Destroy()
            highlights[Player] = nil  
        end
    end

    
    Humanoid:GetPropertyChangedSignal("Health"):Connect(function()
        if Humanoid.Health <= 0 then
            Disconnect()
        end
    end)
    
    Player:GetPropertyChangedSignal("TeamColor"):Connect(UpdateFillColor)
    
    
    UpdateFillColor()
end


local function HighlightPlayer(Player)
    if Player.Character then
        ApplyHighlight(Player)
    end
    Player.CharacterAdded:Connect(function()
        ApplyHighlight(Player)
    end)
end

-- TOGGLE
local toggle = sector.element('Toggle', 'Chams', false, function(enabled)
    if enabled then
        for _, Player in next, Players:GetPlayers() do
            HighlightPlayer(Player)
        end
        Players.PlayerAdded:Connect(HighlightPlayer)
    else
        -- remove chams
        for _, Highlight in pairs(highlights) do
            if Highlight then
                Highlight:Destroy()
            end
        end
       
        highlights = {}
    end
end)

-- color picker
toggle:add_color({Color = highlightColor}, nil, function(v)
    highlightColor = v.Color
    
    for _, Highlight in pairs(highlights) do
        if Highlight then
            Highlight.FillColor = highlightColor
        end
    end
end)

local cornerboxes = sector.element('toggle', 'Corner boxes (2d)', false, function(enabled)
    local Settings = {
        Box_Color = Color3.fromRGB(255, 0, 0), 
        Box_Thickness = 2,
        Team_Check = false,
        Team_Color = false,
        Autothickness = true
    }
    
    --Locals
    local Space = game:GetService("Workspace")
    local Player = game:GetService("Players").LocalPlayer
    local Camera = Space.CurrentCamera
    
    -- Locals
    local function NewLine(color, thickness)
        local line = Drawing.new("Line")
        line.Visible = false
        line.From = Vector2.new(0, 0)
        line.To = Vector2.new(0, 0)
        line.Color = color
        line.Thickness = thickness
        line.Transparency = 1
        return line
    end
    
    local function Vis(lib, state)
        for i, v in pairs(lib) do
            v.Visible = state
        end
    end
    
    local function Colorize(lib, color)
        for i, v in pairs(lib) do
            v.Color = color
        end
    end
    
    --Main Draw Function
    local function Main(plr)
        repeat wait() until plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil
        local R15
        if plr.Character.Humanoid.RigType == Enum.HumanoidRigType.R15 then
            R15 = true
        else 
            R15 = false
        end
        local Library = {
            TL1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
            TL2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
    
            TR1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
            TR2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
    
            BL1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
            BL2 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
    
            BR1 = NewLine(Settings.Box_Color, Settings.Box_Thickness),
            BR2 = NewLine(Settings.Box_Color, Settings.Box_Thickness)
        }
        
        local oripart = Instance.new("Part")
        oripart.Parent = Space
        oripart.Transparency = 1
        oripart.CanCollide = false
        oripart.Size = Vector3.new(1, 1, 1)
        oripart.Position = Vector3.new(0, 0, 0)
        
        -- Loop updater
        local function Updater()
            local c 
            c = game:GetService("RunService").RenderStepped:Connect(function()
                if plr.Character ~= nil and plr.Character:FindFirstChild("Humanoid") ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") ~= nil and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("Head") ~= nil then
                    local Hum = plr.Character
                    local HumPos, vis = Camera:WorldToViewportPoint(Hum.HumanoidRootPart.Position)
                    if vis then
                        oripart.Size = Vector3.new(Hum.HumanoidRootPart.Size.X, Hum.HumanoidRootPart.Size.Y*1.5, Hum.HumanoidRootPart.Size.Z)
                        oripart.CFrame = CFrame.new(Hum.HumanoidRootPart.CFrame.Position, Camera.CFrame.Position)
                        local SizeX = oripart.Size.X
                        local SizeY = oripart.Size.Y
                        local TL = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(SizeX, SizeY, 0)).p)
                        local TR = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(-SizeX, SizeY, 0)).p)
                        local BL = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(SizeX, -SizeY, 0)).p)
                        local BR = Camera:WorldToViewportPoint((oripart.CFrame * CFrame.new(-SizeX, -SizeY, 0)).p)
    
                        if Settings.Team_Check then
                            if plr.TeamColor == Player.TeamColor then
                                Colorize(Library, Color3.fromRGB(0, 255, 0)) -- Green clan/team
                            else 
                                Colorize(Library, Color3.fromRGB(255, 0, 0)) -- Red opp
                            end
                        end
    
                        if Settings.Team_Color then
                            Colorize(Library, plr.TeamColor.Color)
                        end
    
                        local ratio = (Camera.CFrame.p - Hum.HumanoidRootPart.Position).magnitude
                        local offset = math.clamp(1/ratio*750, 2, 300)
    
                        Library.TL1.From = Vector2.new(TL.X, TL.Y)
                        Library.TL1.To = Vector2.new(TL.X + offset, TL.Y)
                        Library.TL2.From = Vector2.new(TL.X, TL.Y)
                        Library.TL2.To = Vector2.new(TL.X, TL.Y + offset)
    
                        Library.TR1.From = Vector2.new(TR.X, TR.Y)
                        Library.TR1.To = Vector2.new(TR.X - offset, TR.Y)
                        Library.TR2.From = Vector2.new(TR.X, TR.Y)
                        Library.TR2.To = Vector2.new(TR.X, TR.Y + offset)
    
                        Library.BL1.From = Vector2.new(BL.X, BL.Y)
                        Library.BL1.To = Vector2.new(BL.X + offset, BL.Y)
                        Library.BL2.From = Vector2.new(BL.X, BL.Y)
                        Library.BL2.To = Vector2.new(BL.X, BL.Y - offset)
    
                        Library.BR1.From = Vector2.new(BR.X, BR.Y)
                        Library.BR1.To = Vector2.new(BR.X - offset, BR.Y)
                        Library.BR2.From = Vector2.new(BR.X, BR.Y)
                        Library.BR2.To = Vector2.new(BR.X, BR.Y - offset)
    
                        Vis(Library, true)
    
                        if Settings.Autothickness then
                            local distance = (Player.Character.HumanoidRootPart.Position - oripart.Position).magnitude
                            local value = math.clamp(1/distance*100, 1, 4) --0.1 min 6 max
                            for u, x in pairs(Library) do
                                x.Thickness = value
                            end
                        else 
                            for u, x in pairs(Library) do
                                x.Thickness = Settings.Box_Thickness
                            end
                        end
                    else 
                        Vis(Library, false)
                    end
                else 
                    Vis(Library, false)
                    if game:GetService("Players"):FindFirstChild(plr.Name) == nil then
                        for i, v in pairs(Library) do
                            v:Remove()
                            oripart:Destroy()
                        end
                        c:Disconnect()
                    end
                end
            end)
        end
        coroutine.wrap(Updater)()
    end
    
    -- Draw Boxes
    for i, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name ~= Player.Name then
          coroutine.wrap(Main)(v)
        end
    end
    
    game:GetService("Players").PlayerAdded:Connect(function(newplr)
        coroutine.wrap(Main)(newplr)
    end)
end)


conerboxes:add_color({Color = Settings.Box_Color}, nil, function(v)
    Settings.Box_Color = v.Color
end)

conerboxes:ColorPicker({
    Title = "Colorpicker",
    Description = "e",
    Default = Color3.new(255,0,0),
    }, function(v)
        
        Settings.Box_Color = v
end)